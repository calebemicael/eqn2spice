
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 18 16:13:11 BRT 2015
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.util.*;
import abstractSyntax.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 18 16:13:11 BRT 2015
  */
public class Analizador extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\023\000\002\002\004\000\002\002\005\000\002\003" +
    "\006\000\002\004\004\000\002\004\003\000\002\005\006" +
    "\000\002\006\004\000\002\006\003\000\002\007\010\000" +
    "\002\007\006\000\002\010\005\000\002\010\003\000\002" +
    "\011\005\000\002\011\003\000\002\012\004\000\002\012" +
    "\004\000\002\012\003\000\002\013\005\000\002\013\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\052\000\004\004\006\001\002\000\004\005\016\001" +
    "\002\000\004\002\014\001\002\000\004\017\007\001\002" +
    "\000\004\020\011\001\002\000\004\012\013\001\002\000" +
    "\006\012\ufffd\020\011\001\002\000\004\012\ufffe\001\002" +
    "\000\004\005\uffff\001\002\000\004\002\001\001\002\000" +
    "\006\010\026\021\024\001\002\000\004\017\017\001\002" +
    "\000\004\021\020\001\002\000\006\012\ufffa\021\020\001" +
    "\002\000\004\012\022\001\002\000\006\010\ufffc\021\ufffc" +
    "\001\002\000\004\012\ufffb\001\002\000\004\017\052\001" +
    "\002\000\004\002\000\001\002\000\004\021\027\001\002" +
    "\000\004\011\030\001\002\000\004\017\031\001\002\000" +
    "\010\006\037\013\036\020\040\001\002\000\014\007\ufff1" +
    "\012\ufff1\014\051\015\ufff1\016\ufff1\001\002\000\012\007" +
    "\ufff4\012\ufff4\015\ufff4\016\ufff4\001\002\000\012\007\ufff6" +
    "\012\ufff6\015\ufff6\016\045\001\002\000\006\012\050\015" +
    "\043\001\002\000\006\006\037\020\040\001\002\000\010" +
    "\006\037\013\036\020\040\001\002\000\014\007\uffef\012" +
    "\uffef\014\uffef\015\uffef\016\uffef\001\002\000\006\007\042" +
    "\015\043\001\002\000\014\007\ufff0\012\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\001\002\000\010\006\037\013\036\020\040" +
    "\001\002\000\012\007\ufff7\012\ufff7\015\ufff7\016\045\001" +
    "\002\000\010\006\037\013\036\020\040\001\002\000\012" +
    "\007\ufff5\012\ufff5\015\ufff5\016\ufff5\001\002\000\012\007" +
    "\ufff3\012\ufff3\015\ufff3\016\ufff3\001\002\000\004\002\ufff9" +
    "\001\002\000\012\007\ufff2\012\ufff2\015\ufff2\016\ufff2\001" +
    "\002\000\010\006\037\013\036\020\040\001\002\000\006" +
    "\012\054\015\043\001\002\000\004\002\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\052\000\006\002\004\003\003\001\001\000\004\005" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\007\001\001\000\002\001\001\000\004\004\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\024\001\001\000\002\001\001\000\004\006" +
    "\020\001\001\000\004\006\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\034\011\033\012\032\013\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\046\001\001\000\012\010" +
    "\040\011\033\012\032\013\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\043\012" +
    "\032\013\031\001\001\000\002\001\001\000\006\012\045" +
    "\013\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\010\052\011\033" +
    "\012\032\013\031\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Analizador$actions {
  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr_3 ::= INPUT_IDENTIFIER 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
						RESULT = PoolOfLiterals.get(Symbol.symbol(""+id));
					
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expr_3",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr_3 ::= L_PAR expr_0 R_PAR 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
						RESULT = c;
					
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expr_3",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr_2 ::= expr_3 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
						RESULT = c;
					
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expr_2",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr_2 ::= expr_3 APOSTROPHE 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
						RESULT = new NegativeExpression(c);
					
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expr_2",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr_2 ::= EXCLAMATION expr_3 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
						RESULT = new NegativeExpression(c);
					
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expr_2",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr_1 ::= expr_2 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
						RESULT = c;
					
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expr_1",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr_1 ::= expr_1 TIMES expr_2 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
						RESULT = new ConjunctionExpression(l,r);
					
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expr_1",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr_0 ::= expr_1 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
						RESULT = c;
					
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expr_0",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr_0 ::= expr_0 PLUS expr_1 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
						RESULT = new DisjunctionExpression(l,r);
					
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expr_0",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr_dec ::= OUTPUT_IDENTIFIER ASSIGN expr_0 SEMICOLON 
            {
              AssignExpression RESULT =null;
		int outputleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).left;
		int outputright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).right;
		Object output = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
							AssignExpression ae = new AssignExpression(r);
							ae.setTarget(PoolOfLiterals.get(Symbol.symbol(""+output)));
							RESULT = ae;
						
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expr_dec",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr_dec ::= L_BRACE OUTPUT_IDENTIFIER R_BRACE ASSIGN expr_0 SEMICOLON 
            {
              AssignExpression RESULT =null;
		int outputleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).left;
		int outputright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).right;
		Object output = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
							//System.out.print(output);
							AssignExpression ae = new AssignExpression(r);
							ae.setTarget(PoolOfLiterals.get(Symbol.symbol(""+output)));
							RESULT = ae;
						
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("expr_dec",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // output_list ::= OUTPUT_IDENTIFIER 
            {
              List<LiteralExpression> RESULT =null;
		int oidleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int oidright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object oid = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
									List<LiteralExpression> list = new ArrayList<>();
									list.add(PoolOfLiterals.get(Symbol.symbol(""+oid)));
									RESULT = list;
								
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("output_list",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // output_list ::= OUTPUT_IDENTIFIER output_list 
            {
              List<LiteralExpression> RESULT =null;
		int oidleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int oidright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object oid = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		List<LiteralExpression> list = (List<LiteralExpression>)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
									list.add(PoolOfLiterals.get(Symbol.symbol(""+oid)));
									RESULT = list;
								
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("output_list",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // output_dec ::= OUTORDER ASSIGN output_list SEMICOLON 
            {
              List<LiteralExpression> RESULT =null;
		int o_listleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int o_listright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		List<LiteralExpression> o_list = (List<LiteralExpression>)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
								RESULT = o_list;
							
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("output_dec",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // input_list ::= INPUT_IDENTIFIER 
            {
              List<LiteralExpression> RESULT =null;
		int iidleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int iidright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		Object iid = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
								List<LiteralExpression> list = new ArrayList<>();
								list.add(PoolOfLiterals.get(Symbol.symbol(""+iid)));
								RESULT = list;
							
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("input_list",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // input_list ::= INPUT_IDENTIFIER input_list 
            {
              List<LiteralExpression> RESULT =null;
		int iidleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int iidright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object iid = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		List<LiteralExpression> list = (List<LiteralExpression>)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
								list.add(PoolOfLiterals.get(Symbol.symbol(""+iid)));
								RESULT = list;
							
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("input_list",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // input_dec ::= INORDER ASSIGN input_list SEMICOLON 
            {
              List<LiteralExpression> RESULT =null;
		int i_listleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int i_listright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		List<LiteralExpression> i_list = (List<LiteralExpression>)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		
								RESULT = i_list;
							
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("input_dec",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // declarations ::= input_dec output_dec expr_dec 
            {
              Declaration RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).right;
		List<LiteralExpression> in = (List<LiteralExpression>)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)).value;
		int outleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int outright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		List<LiteralExpression> out = (List<LiteralExpression>)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		int assignExpleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).left;
		int assignExpright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()).right;
		AssignExpression assignExp = (AssignExpression)((java_cup.runtime.Symbol) CUP$Analizador$stack.peek()).value;
		
									Declaration d = new Declaration();
									d.setInputs(in);
									d.setOutputs(out);
									d.assign(PoolOfLiterals.get(assignExp.getTarget()),assignExp.getExp());
									RESULT = d;
								
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("declarations",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= declarations EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Declaration start_val = (Declaration)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

